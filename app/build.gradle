plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 31

    signingConfigs {
        release
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    if (isRunningOnTravis) {
        // configure keystore
        signingConfigs.release.storeFile = file("../secure.keystore")
        signingConfigs.release.storePassword = System.getenv("storePass")
        signingConfigs.release.keyAlias = System.getenv("alias")
        signingConfigs.release.keyPassword = System.getenv("pass")

    } else {
        Properties keyProps = new Properties()
        keyProps.load(new FileInputStream(file('../../keystore.properties')))
        signingConfigs.release.storeFile = file(keyProps["store"])
        signingConfigs.release.keyAlias = keyProps["alias"]
        signingConfigs.release.storePassword = keyProps["storePass"]
        signingConfigs.release.keyPassword = keyProps["pass"]
    }

    defaultConfig {
        applicationId "uk.ryanwong.dazn.codechallenge"
        minSdk 21
        targetSdk 31
        versionCode 2
        versionName "1.1.0"

        resConfigs "en"
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "uk.ryanwong.dazn.codechallenge.CustomTestRunner"

        // Bundle output filename
        setProperty("archivesBaseName", "dazn-" + versionName + "-" + new Date().format('yyyyMMdd-HHmmss'))

    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "dazn-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    def formattedDate = date.format('yyyyMMdd-HHmmss')
                    outputFileName = "dazn-${variant.name}-${variant.versionName}-${formattedDate}.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }

    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
        }
    }

    testOptions {
        animationsDisabled = true
    }

    packagingOptions {
        // for JNA and JNA-platform
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
        // for byte-buddy
        exclude "META-INF/licenses/ASM"
        pickFirst "win32-x86-64/attach_hotspot_windows.dll"
        pickFirst "win32-x86/attach_hotspot_windows.dll"
    }

    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true
    }
}

dependencies {

    // Kotlin and coroutines
    def coroutines_version = "1.5.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.recyclerview:recyclerview:1.2.1"

    // Constraint Layout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // ViewModel and LiveData
    def lifecycle_version = '2.4.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Navigation
    def navigation_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // Core with Ktx
    implementation 'androidx.core:core-ktx:1.7.0'

    // Retrofit
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"

    // Moshi
    def moshi_version = "1.12.0"
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.squareup.moshi:moshi-adapters:$moshi_version"

    // Room
    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Glide
    def glide_version = "4.12.0"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Firebase services
    implementation platform('com.google.firebase:firebase-bom:28.4.1')
    implementation 'com.google.firebase:firebase-crashlytics'

    // Dependencies for local unit tests
    def junit_version = "4.13.2"
    testImplementation "junit:junit:$junit_version"
    testImplementation 'org.hamcrest:hamcrest-all:1.3'

    // AndroidX Test - JVM testing
    def test_core_version = "1.4.0"
    def test_ext_version = "1.1.3"
    def arch_core_testing_version = "2.1.0"
    testImplementation "androidx.test:core-ktx:$test_core_version"
    testImplementation 'org.robolectric:robolectric:4.7'
    testImplementation "androidx.test.ext:junit-ktx:$test_ext_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // AndroidX Test - Instrumented testing
    def espresso_version = "3.4.0"
    androidTestImplementation "androidx.test.ext:junit:$test_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_version"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation "junit:junit:$junit_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    debugImplementation 'androidx.fragment:fragment-testing:1.4.0'
    implementation "androidx.test:core-ktx:$test_core_version"

    // Dependencies for Android instrumented unit tests
    androidTestImplementation 'org.mockito:mockito-core:4.0.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.1'
    androidTestImplementation "androidx.arch.core:core-testing:$arch_core_testing_version"
    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"

    // ExoplayerActivity
    implementation 'com.google.android.exoplayer:exoplayer:2.16.0'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    // For instrumented tests - with Kotlin
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"
}